{"version":3,"sources":["interfaces/Question.ts","constants/QuestionsData.ts","components/FormQuestion/FormQuestion.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AnswerMode","AnswerType","SingleLineInput","Number","questions","id","title","answer","mode","type","Text","placeholder","SingleChoiceInput","options","group","label","value","FormQuestion","onChange","onQuestionChange","event","className","aria-label","aria-required","map","option","name","checked","htmlFor","_renderAnswerInput","memo","initialFormState","firstName","address","childrenExist","occupation","email","App","useState","formState","setFormState","questionId","target","useEffect","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0e42d5f.chunk.js","sourcesContent":["export enum AnswerMode {\n  SingleLineInput = \"single-line-input\",\n  SingleChoiceInput = \"single-choice-input\",\n}\n\nexport enum AnswerType {\n  Text = \"text\",\n  Number = \"number\",\n}\n\nexport type IAnswer<T> = T extends AnswerMode.SingleLineInput\n  ? { mode: AnswerMode.SingleLineInput; type: AnswerType; placeholder?: string; }\n  : { mode: AnswerMode.SingleChoiceInput; options: Array<ISingleChoiceAnswer> };\n\n  export interface ISingleChoiceAnswer {\n    readonly group: string;\n    readonly label: string;\n    readonly value: string;\n  }\n\nexport type IQuestion = {\n  readonly id: string;\n  readonly title: string;\n  readonly answer:\n    | IAnswer<AnswerMode.SingleLineInput>\n    | IAnswer<AnswerMode.SingleChoiceInput>;\n  readonly value?: string | number | undefined;\n  optional?: boolean;\n  onChange: (id: string, event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport type IQuestionProps = Omit<IQuestion, 'onChange'>;\n","import { AnswerMode, AnswerType, IQuestionProps } from \"../interfaces/Question\";\n\nexport const childrenOptionalQuestion: IQuestionProps = {\n  id: \"numberOfChildren\",\n  title: \"How many childreen do you have?\",\n  answer: { mode: AnswerMode.SingleLineInput, type: AnswerType.Number, placeholder: 'Number of Childreen' },\n}\n\nexport const questions: Array<IQuestionProps> = [\n  {\n    id: \"firstName\",\n    title: \"What's your first name?\",\n    answer: { mode: AnswerMode.SingleLineInput, type: AnswerType.Text, placeholder: 'Your first name' },\n  },\n  {\n    id: \"address\",\n    title: \"What's your address\",\n    answer: { mode: AnswerMode.SingleLineInput, type: AnswerType.Text, placeholder: 'Your home address' },\n  },\n  {\n    id: \"childrenExist\",\n    title: \"Do you have children?\",\n    answer: {\n      mode: AnswerMode.SingleChoiceInput,\n      options: [\n        { group: \"childrenExist\", label: \"Yes\", value: \"true\" },\n        { group: \"childrenExist\", label: \"No\", value: \"false\" },\n      ],\n    },\n  },\n  {\n    id: \"occupation\",\n    title: \"What's your occupation?\",\n    answer: {\n      mode: AnswerMode.SingleChoiceInput,\n      options: [\n        { group: \"occupation\", label: \"Employed\", value: \"EMPLOYED\" },\n        { group: \"occupation\", label: \"Self-Employed\", value: \"SELF_EMPLOYED\" },\n        { group: \"occupation\", label: \"Student\", value: \"STUDENT\" },\n      ],\n    },\n  },\n  {\n    id: \"email\",\n    title: \"What's your email?\",\n    answer: { mode: AnswerMode.SingleLineInput, type: AnswerType.Text, placeholder: 'Your email address' },\n  },\n];","import { FunctionComponent, memo } from \"react\";\nimport { AnswerMode, IQuestion, ISingleChoiceAnswer } from \"../../interfaces/Question\";\n\nconst FormQuestion: FunctionComponent<IQuestion> = ({ id, value, title, answer, onChange }) => {\n  const onQuestionChange = (event: React.ChangeEvent<HTMLInputElement>) => onChange(id, event);\n  const _renderAnswerInput = () => {\n    switch (answer.mode) {\n      case AnswerMode.SingleLineInput:\n        return (\n          <input\n            type={answer.type}\n            placeholder={answer.placeholder}\n            value={value}\n            onChange={onQuestionChange}\n            aria-label={title}\n            aria-required=\"true\"\n          />\n        );\n      case AnswerMode.SingleChoiceInput:\n        return (\n          <div className=\"formQuestion__radio-group\">\n            {answer.options.map((option: ISingleChoiceAnswer) => (\n              <div key={option.label} className=\"radio-group__option\">\n                <input\n                  type=\"radio\"\n                  id={option.label}\n                  value={option.value}\n                  name={option.group}\n                  onChange={onQuestionChange}\n                  checked={value === option.value}\n                />\n                <label htmlFor={option.label}>{option.label}</label>\n              </div>\n            ))}\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"formQuestion\">\n      <h1>{title}</h1>\n      {_renderAnswerInput()}\n    </div>\n  );\n};\n\nexport default memo(FormQuestion);\n","import { useState } from 'react';\nimport { questions } from \"./constants/QuestionsData\"\nimport FormQuestion from \"./components/FormQuestion/FormQuestion\";\nimport './App.scss';\nimport { useEffect } from 'react';\nimport { IForm } from './interfaces/Form';\n\nconst initialFormState = {\n  firstName: \"\",\n  address: \"\",\n  childrenExist: \"\",\n  occupation: \"\",\n  email: \"\",\n};\n\nfunction App() {\n  const [formState, setFormState] = useState<IForm>(initialFormState);\n  const onQuestionChange = ( questionId: string, event: React.ChangeEvent<HTMLInputElement> ) => {\n    const { value } = event.target;\n    setFormState({ ...formState, [questionId]: value });\n  };\n\n  useEffect(() => {\n    console.log(formState)\n  }, [formState])\n  \n  return (\n    <div className=\"App\">\n      {\n        questions.map(({ id, title, answer }) => (\n          <FormQuestion\n            key={id}\n            id={id}\n            title={title}\n            answer={answer}\n            onChange={onQuestionChange}\n            value={formState[id as keyof IForm]}\n          />\n        ))\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}